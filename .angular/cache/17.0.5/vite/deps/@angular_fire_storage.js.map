{
  "version": 3,
  "sources": ["../../../../../node_modules/rxfire/auth/index.esm.js", "../../../../../node_modules/@angular/fire/fesm2022/angular-fire-auth.mjs", "../../../../../node_modules/rxfire/storage/index.esm.js", "../../../../../node_modules/@angular/fire/fesm2022/angular-fire-storage.mjs"],
  "sourcesContent": ["import { onAuthStateChanged, onIdTokenChanged, getIdToken } from 'firebase/auth';\nimport { Observable, from, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Create an observable of authentication state. The observer is only\n * triggered on sign-in or sign-out.\n * @param auth firebase.auth.Auth\n */\nfunction authState(auth) {\n    return new Observable(function (subscriber) {\n        var unsubscribe = onAuthStateChanged(auth, subscriber.next.bind(subscriber), subscriber.error.bind(subscriber), subscriber.complete.bind(subscriber));\n        return { unsubscribe: unsubscribe };\n    });\n}\n/**\n * Create an observable of user state. The observer is triggered for sign-in,\n * sign-out, and token refresh events\n * @param auth firebase.auth.Auth\n */\nfunction user(auth) {\n    return new Observable(function (subscriber) {\n        var unsubscribe = onIdTokenChanged(auth, subscriber.next.bind(subscriber), subscriber.error.bind(subscriber), subscriber.complete.bind(subscriber));\n        return { unsubscribe: unsubscribe };\n    });\n}\n/**\n * Create an observable of idToken state. The observer is triggered for sign-in,\n * sign-out, and token refresh events\n * @param auth firebase.auth.Auth\n */\nfunction idToken(auth) {\n    return user(auth).pipe(switchMap(function (user) { return (user ? from(getIdToken(user)) : of(null)); }));\n}\n\nexport { authState, idToken, user };\n\n", "import { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵAppCheckInstances, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { authState as authState$1, user as user$1, idToken as idToken$1 } from 'rxfire/auth';\nimport { applyActionCode as applyActionCode$1, beforeAuthStateChanged as beforeAuthStateChanged$1, checkActionCode as checkActionCode$1, confirmPasswordReset as confirmPasswordReset$1, connectAuthEmulator as connectAuthEmulator$1, createUserWithEmailAndPassword as createUserWithEmailAndPassword$1, deleteUser as deleteUser$1, fetchSignInMethodsForEmail as fetchSignInMethodsForEmail$1, getAdditionalUserInfo as getAdditionalUserInfo$1, getAuth as getAuth$1, getIdToken as getIdToken$1, getIdTokenResult as getIdTokenResult$1, getMultiFactorResolver as getMultiFactorResolver$1, getRedirectResult as getRedirectResult$1, initializeAuth as initializeAuth$1, initializeRecaptchaConfig as initializeRecaptchaConfig$1, isSignInWithEmailLink as isSignInWithEmailLink$1, linkWithCredential as linkWithCredential$1, linkWithPhoneNumber as linkWithPhoneNumber$1, linkWithPopup as linkWithPopup$1, linkWithRedirect as linkWithRedirect$1, multiFactor as multiFactor$1, onAuthStateChanged as onAuthStateChanged$1, onIdTokenChanged as onIdTokenChanged$1, parseActionCodeURL as parseActionCodeURL$1, reauthenticateWithCredential as reauthenticateWithCredential$1, reauthenticateWithPhoneNumber as reauthenticateWithPhoneNumber$1, reauthenticateWithPopup as reauthenticateWithPopup$1, reauthenticateWithRedirect as reauthenticateWithRedirect$1, reload as reload$1, sendEmailVerification as sendEmailVerification$1, sendPasswordResetEmail as sendPasswordResetEmail$1, sendSignInLinkToEmail as sendSignInLinkToEmail$1, setPersistence as setPersistence$1, signInAnonymously as signInAnonymously$1, signInWithCredential as signInWithCredential$1, signInWithCustomToken as signInWithCustomToken$1, signInWithEmailAndPassword as signInWithEmailAndPassword$1, signInWithEmailLink as signInWithEmailLink$1, signInWithPhoneNumber as signInWithPhoneNumber$1, signInWithPopup as signInWithPopup$1, signInWithRedirect as signInWithRedirect$1, signOut as signOut$1, unlink as unlink$1, updateCurrentUser as updateCurrentUser$1, updateEmail as updateEmail$1, updatePassword as updatePassword$1, updatePhoneNumber as updatePhoneNumber$1, updateProfile as updateProfile$1, useDeviceLanguage as useDeviceLanguage$1, validatePassword as validatePassword$1, verifyBeforeUpdateEmail as verifyBeforeUpdateEmail$1, verifyPasswordResetCode as verifyPasswordResetCode$1 } from 'firebase/auth';\nexport * from 'firebase/auth';\nconst AUTH_PROVIDER_NAME = 'auth';\nclass Auth {\n  constructor(auth) {\n    return auth;\n  }\n}\nclass AuthInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(AUTH_PROVIDER_NAME);\n  }\n}\nconst authInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(AUTH_PROVIDER_NAME))), distinct());\nconst PROVIDED_AUTH_INSTANCES = new InjectionToken('angularfire2.auth-instances');\nfunction defaultAuthInstanceFactory(provided, defaultApp) {\n  const defaultAuth = ɵgetDefaultInstanceOf(AUTH_PROVIDER_NAME, provided, defaultApp);\n  return defaultAuth && new Auth(defaultAuth);\n}\nfunction authInstanceFactory(fn) {\n  return (zone, injector) => {\n    const auth = zone.runOutsideAngular(() => fn(injector));\n    return new Auth(auth);\n  };\n}\nconst AUTH_INSTANCES_PROVIDER = {\n  provide: AuthInstances,\n  deps: [[new Optional(), PROVIDED_AUTH_INSTANCES]]\n};\nconst DEFAULT_AUTH_INSTANCE_PROVIDER = {\n  provide: Auth,\n  useFactory: defaultAuthInstanceFactory,\n  deps: [[new Optional(), PROVIDED_AUTH_INSTANCES], FirebaseApp]\n};\nclass AuthModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'auth');\n  }\n  static ɵfac = function AuthModule_Factory(t) {\n    return new (t || AuthModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AuthModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_AUTH_INSTANCE_PROVIDER, AUTH_INSTANCES_PROVIDER]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_AUTH_INSTANCE_PROVIDER, AUTH_INSTANCES_PROVIDER]\n    }]\n  }], () => [], null);\n})();\nfunction provideAuth(fn, ...deps) {\n  return {\n    ngModule: AuthModule,\n    providers: [{\n      provide: PROVIDED_AUTH_INSTANCES,\n      useFactory: authInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers, FirebaseApps, [new Optional(), ɵAppCheckInstances], ...deps]\n    }]\n  };\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst authState = ɵzoneWrap(authState$1, true);\nconst user = ɵzoneWrap(user$1, true);\nconst idToken = ɵzoneWrap(idToken$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst applyActionCode = ɵzoneWrap(applyActionCode$1, true);\nconst beforeAuthStateChanged = ɵzoneWrap(beforeAuthStateChanged$1, true);\nconst checkActionCode = ɵzoneWrap(checkActionCode$1, true);\nconst confirmPasswordReset = ɵzoneWrap(confirmPasswordReset$1, true);\nconst connectAuthEmulator = ɵzoneWrap(connectAuthEmulator$1, true);\nconst createUserWithEmailAndPassword = ɵzoneWrap(createUserWithEmailAndPassword$1, true);\nconst deleteUser = ɵzoneWrap(deleteUser$1, true);\nconst fetchSignInMethodsForEmail = ɵzoneWrap(fetchSignInMethodsForEmail$1, true);\nconst getAdditionalUserInfo = ɵzoneWrap(getAdditionalUserInfo$1, true);\nconst getAuth = ɵzoneWrap(getAuth$1, true);\nconst getIdToken = ɵzoneWrap(getIdToken$1, true);\nconst getIdTokenResult = ɵzoneWrap(getIdTokenResult$1, true);\nconst getMultiFactorResolver = ɵzoneWrap(getMultiFactorResolver$1, true);\nconst getRedirectResult = ɵzoneWrap(getRedirectResult$1, true);\nconst initializeAuth = ɵzoneWrap(initializeAuth$1, true);\nconst initializeRecaptchaConfig = ɵzoneWrap(initializeRecaptchaConfig$1, true);\nconst isSignInWithEmailLink = ɵzoneWrap(isSignInWithEmailLink$1, true);\nconst linkWithCredential = ɵzoneWrap(linkWithCredential$1, true);\nconst linkWithPhoneNumber = ɵzoneWrap(linkWithPhoneNumber$1, true);\nconst linkWithPopup = ɵzoneWrap(linkWithPopup$1, true);\nconst linkWithRedirect = ɵzoneWrap(linkWithRedirect$1, true);\nconst multiFactor = ɵzoneWrap(multiFactor$1, true);\nconst onAuthStateChanged = ɵzoneWrap(onAuthStateChanged$1, true);\nconst onIdTokenChanged = ɵzoneWrap(onIdTokenChanged$1, true);\nconst parseActionCodeURL = ɵzoneWrap(parseActionCodeURL$1, true);\nconst reauthenticateWithCredential = ɵzoneWrap(reauthenticateWithCredential$1, true);\nconst reauthenticateWithPhoneNumber = ɵzoneWrap(reauthenticateWithPhoneNumber$1, true);\nconst reauthenticateWithPopup = ɵzoneWrap(reauthenticateWithPopup$1, true);\nconst reauthenticateWithRedirect = ɵzoneWrap(reauthenticateWithRedirect$1, true);\nconst reload = ɵzoneWrap(reload$1, true);\nconst sendEmailVerification = ɵzoneWrap(sendEmailVerification$1, true);\nconst sendPasswordResetEmail = ɵzoneWrap(sendPasswordResetEmail$1, true);\nconst sendSignInLinkToEmail = ɵzoneWrap(sendSignInLinkToEmail$1, true);\nconst setPersistence = ɵzoneWrap(setPersistence$1, true);\nconst signInAnonymously = ɵzoneWrap(signInAnonymously$1, true);\nconst signInWithCredential = ɵzoneWrap(signInWithCredential$1, true);\nconst signInWithCustomToken = ɵzoneWrap(signInWithCustomToken$1, true);\nconst signInWithEmailAndPassword = ɵzoneWrap(signInWithEmailAndPassword$1, true);\nconst signInWithEmailLink = ɵzoneWrap(signInWithEmailLink$1, true);\nconst signInWithPhoneNumber = ɵzoneWrap(signInWithPhoneNumber$1, true);\nconst signInWithPopup = ɵzoneWrap(signInWithPopup$1, true);\nconst signInWithRedirect = ɵzoneWrap(signInWithRedirect$1, true);\nconst signOut = ɵzoneWrap(signOut$1, true);\nconst unlink = ɵzoneWrap(unlink$1, true);\nconst updateCurrentUser = ɵzoneWrap(updateCurrentUser$1, true);\nconst updateEmail = ɵzoneWrap(updateEmail$1, true);\nconst updatePassword = ɵzoneWrap(updatePassword$1, true);\nconst updatePhoneNumber = ɵzoneWrap(updatePhoneNumber$1, true);\nconst updateProfile = ɵzoneWrap(updateProfile$1, true);\nconst useDeviceLanguage = ɵzoneWrap(useDeviceLanguage$1, true);\nconst validatePassword = ɵzoneWrap(validatePassword$1, true);\nconst verifyBeforeUpdateEmail = ɵzoneWrap(verifyBeforeUpdateEmail$1, true);\nconst verifyPasswordResetCode = ɵzoneWrap(verifyPasswordResetCode$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Auth, AuthInstances, AuthModule, applyActionCode, authInstance$, authState, beforeAuthStateChanged, checkActionCode, confirmPasswordReset, connectAuthEmulator, createUserWithEmailAndPassword, deleteUser, fetchSignInMethodsForEmail, getAdditionalUserInfo, getAuth, getIdToken, getIdTokenResult, getMultiFactorResolver, getRedirectResult, idToken, initializeAuth, initializeRecaptchaConfig, isSignInWithEmailLink, linkWithCredential, linkWithPhoneNumber, linkWithPopup, linkWithRedirect, multiFactor, onAuthStateChanged, onIdTokenChanged, parseActionCodeURL, provideAuth, reauthenticateWithCredential, reauthenticateWithPhoneNumber, reauthenticateWithPopup, reauthenticateWithRedirect, reload, sendEmailVerification, sendPasswordResetEmail, sendSignInLinkToEmail, setPersistence, signInAnonymously, signInWithCredential, signInWithCustomToken, signInWithEmailAndPassword, signInWithEmailLink, signInWithPhoneNumber, signInWithPopup, signInWithRedirect, signOut, unlink, updateCurrentUser, updateEmail, updatePassword, updatePhoneNumber, updateProfile, useDeviceLanguage, user, validatePassword, verifyBeforeUpdateEmail, verifyPasswordResetCode };\n", "import { getDownloadURL as getDownloadURL$1, getMetadata as getMetadata$1, uploadBytesResumable as uploadBytesResumable$1, uploadString as uploadString$1 } from 'firebase/storage';\nimport { Observable, from } from 'rxjs';\nimport { shareReplay, map } from 'rxjs/operators';\n\nfunction fromTask(task) {\n    return new Observable(function (subscriber) {\n        var lastSnapshot = null;\n        var complete = false;\n        var hasError = false;\n        var error = null;\n        var emit = function (snapshot) {\n            lastSnapshot = snapshot;\n            schedule();\n        };\n        var id = null;\n        /**\n         * Schedules an async event to check and emit\n         * the most recent snapshot, and complete or error\n         * if necessary.\n         */\n        var schedule = function () {\n            if (!id) {\n                id = setTimeout(function () {\n                    id = null;\n                    if (lastSnapshot)\n                        subscriber.next(lastSnapshot);\n                    if (complete)\n                        subscriber.complete();\n                    if (hasError)\n                        subscriber.error(error);\n                });\n            }\n        };\n        subscriber.add(function () {\n            // If we have any emissions checks scheduled, cancel them.\n            if (id)\n                clearTimeout(id);\n        });\n        // Emit the initial snapshot\n        emit(task.snapshot);\n        // Take each update and schedule them to be emitted (see `emit`)\n        subscriber.add(task.on('state_changed', emit));\n        // task is a promise, so we can convert that to an observable,\n        // this is done for the ergonomics around making sure we don't\n        // try to push errors or completions through closed subscribers\n        subscriber.add(from(task).subscribe({\n            next: emit,\n            error: function (err) {\n                hasError = true;\n                error = err;\n                schedule();\n            },\n            complete: function () {\n                complete = true;\n                schedule();\n            },\n        }));\n    });\n}\nfunction getDownloadURL(ref) {\n    return from(getDownloadURL$1(ref));\n}\n// TODO: fix storage typing in firebase, then apply the same fix here\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getMetadata(ref) {\n    return from(getMetadata$1(ref));\n}\n// MARK: Breaking change (renaming put to uploadBytesResumable)\nfunction uploadBytesResumable(ref, data, metadata) {\n    return new Observable(function (subscriber) {\n        var task = uploadBytesResumable$1(ref, data, metadata);\n        var subscription = fromTask(task).subscribe(subscriber);\n        return function unsubscribe() {\n            subscription.unsubscribe();\n            task.cancel();\n        };\n    }).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n}\n// MARK: Breaking change (renaming put to uploadString)\nfunction uploadString(ref, data, format, metadata) {\n    return from(uploadString$1(ref, data, format, metadata));\n}\nfunction percentage(task) {\n    return fromTask(task).pipe(map(function (snapshot) { return ({\n        progress: (snapshot.bytesTransferred / snapshot.totalBytes) * 100,\n        snapshot: snapshot,\n    }); }));\n}\n\nexport { fromTask, getDownloadURL, getMetadata, percentage, uploadBytesResumable, uploadString };\n\n", "import { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵAppCheckInstances, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { AuthInstances } from '@angular/fire/auth';\nimport { registerVersion } from 'firebase/app';\nimport { fromTask as fromTask$1, percentage as percentage$1 } from 'rxfire/storage';\nimport { connectStorageEmulator as connectStorageEmulator$1, deleteObject as deleteObject$1, getBlob as getBlob$1, getBytes as getBytes$1, getDownloadURL as getDownloadURL$1, getMetadata as getMetadata$1, getStorage as getStorage$1, getStream as getStream$1, list as list$1, listAll as listAll$1, ref as ref$1, updateMetadata as updateMetadata$1, uploadBytes as uploadBytes$1, uploadBytesResumable as uploadBytesResumable$1, uploadString as uploadString$1 } from 'firebase/storage';\nexport * from 'firebase/storage';\nclass Storage {\n  constructor(auth) {\n    return auth;\n  }\n}\nconst STORAGE_PROVIDER_NAME = 'storage';\nclass StorageInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(STORAGE_PROVIDER_NAME);\n  }\n}\nconst storageInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(STORAGE_PROVIDER_NAME))), distinct());\nconst PROVIDED_STORAGE_INSTANCES = new InjectionToken('angularfire2.storage-instances');\nfunction defaultStorageInstanceFactory(provided, defaultApp) {\n  const defaultStorage = ɵgetDefaultInstanceOf(STORAGE_PROVIDER_NAME, provided, defaultApp);\n  return defaultStorage && new Storage(defaultStorage);\n}\nfunction storageInstanceFactory(fn) {\n  return (zone, injector) => {\n    const storage = zone.runOutsideAngular(() => fn(injector));\n    return new Storage(storage);\n  };\n}\nconst STORAGE_INSTANCES_PROVIDER = {\n  provide: StorageInstances,\n  deps: [[new Optional(), PROVIDED_STORAGE_INSTANCES]]\n};\nconst DEFAULT_STORAGE_INSTANCE_PROVIDER = {\n  provide: Storage,\n  useFactory: defaultStorageInstanceFactory,\n  deps: [[new Optional(), PROVIDED_STORAGE_INSTANCES], FirebaseApp]\n};\nclass StorageModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'gcs');\n  }\n  static ɵfac = function StorageModule_Factory(t) {\n    return new (t || StorageModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: StorageModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_STORAGE_INSTANCE_PROVIDER, STORAGE_INSTANCES_PROVIDER]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StorageModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_STORAGE_INSTANCE_PROVIDER, STORAGE_INSTANCES_PROVIDER]\n    }]\n  }], () => [], null);\n})();\nfunction provideStorage(fn, ...deps) {\n  return {\n    ngModule: StorageModule,\n    providers: [{\n      provide: PROVIDED_STORAGE_INSTANCES,\n      useFactory: storageInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers, FirebaseApps,\n      // Defensively load Auth first, if provided\n      [new Optional(), AuthInstances], [new Optional(), ɵAppCheckInstances], ...deps]\n    }]\n  };\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst fromTask = ɵzoneWrap(fromTask$1, true);\nconst percentage = ɵzoneWrap(percentage$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst connectStorageEmulator = ɵzoneWrap(connectStorageEmulator$1, true);\nconst deleteObject = ɵzoneWrap(deleteObject$1, true);\nconst getBlob = ɵzoneWrap(getBlob$1, true);\nconst getBytes = ɵzoneWrap(getBytes$1, true);\nconst getDownloadURL = ɵzoneWrap(getDownloadURL$1, true);\nconst getMetadata = ɵzoneWrap(getMetadata$1, true);\nconst getStorage = ɵzoneWrap(getStorage$1, true);\nconst getStream = ɵzoneWrap(getStream$1, true);\nconst list = ɵzoneWrap(list$1, true);\nconst listAll = ɵzoneWrap(listAll$1, true);\nconst ref = ɵzoneWrap(ref$1, true);\nconst updateMetadata = ɵzoneWrap(updateMetadata$1, true);\nconst uploadBytes = ɵzoneWrap(uploadBytes$1, true);\nconst uploadBytesResumable = ɵzoneWrap(uploadBytesResumable$1, true);\nconst uploadString = ɵzoneWrap(uploadString$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Storage, StorageInstances, StorageModule, connectStorageEmulator, deleteObject, fromTask, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, percentage, provideStorage, ref, storageInstance$, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };\n"],
  "mappings": "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",
  "names": ["user", "authState", "user", "idToken", "applyActionCode", "beforeAuthStateChanged", "checkActionCode", "confirmPasswordReset", "connectAuthEmulator", "createUserWithEmailAndPassword", "deleteUser", "fetchSignInMethodsForEmail", "getAdditionalUserInfo", "getAuth", "getIdToken", "getIdTokenResult", "getMultiFactorResolver", "getRedirectResult", "initializeAuth", "initializeRecaptchaConfig", "isSignInWithEmailLink", "linkWithCredential", "linkWithPhoneNumber", "linkWithPopup", "linkWithRedirect", "multiFactor", "onAuthStateChanged", "onIdTokenChanged", "parseActionCodeURL", "reauthenticateWithCredential", "reauthenticateWithPhoneNumber", "reauthenticateWithPopup", "reauthenticateWithRedirect", "reload", "sendEmailVerification", "sendPasswordResetEmail", "sendSignInLinkToEmail", "setPersistence", "signInAnonymously", "signInWithCredential", "signInWithCustomToken", "signInWithEmailAndPassword", "signInWithEmailLink", "signInWithPhoneNumber", "signInWithPopup", "signInWithRedirect", "signOut", "unlink", "updateCurrentUser", "updateEmail", "updatePassword", "updatePhoneNumber", "updateProfile", "useDeviceLanguage", "validatePassword", "verifyBeforeUpdateEmail", "verifyPasswordResetCode", "fromTask", "percentage", "connectStorageEmulator", "deleteObject", "getBlob", "getBytes", "getDownloadURL", "getMetadata", "getStorage", "getStream", "list", "listAll", "ref", "updateMetadata", "uploadBytes", "uploadBytesResumable", "uploadString"]
}
